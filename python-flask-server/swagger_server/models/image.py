# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.comment import Comment
from swagger_server import util


class Image(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, title: str=None, tags: str=None, url: str=None, upvotes: int=None, comments: List[Comment]=None):  # noqa: E501
        """Image - a model defined in Swagger

        :param id: The id of this Image.  # noqa: E501
        :type id: int
        :param title: The title of this Image.  # noqa: E501
        :type title: str
        :param tags: The tags of this Image.  # noqa: E501
        :type tags: str
        :param url: The url of this Image.  # noqa: E501
        :type url: str
        :param upvotes: The upvotes of this Image.  # noqa: E501
        :type upvotes: int
        :param comments: The comments of this Image.  # noqa: E501
        :type comments: List[Comment]
        """
        self.swagger_types = {
            'id': int,
            'title': str,
            'tags': str,
            'url': str,
            'upvotes': int,
            'comments': List[Comment]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'tags': 'tags',
            'url': 'url',
            'upvotes': 'upvotes',
            'comments': 'comments'
        }

        self._id = id
        self._title = title
        self._tags = tags
        self._url = url
        self._upvotes = upvotes
        self._comments = comments

    @classmethod
    def from_dict(cls, dikt) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Image of this Image.  # noqa: E501
        :rtype: Image
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Image.

        Unique identifier for the image  # noqa: E501

        :return: The id of this Image.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Image.

        Unique identifier for the image  # noqa: E501

        :param id: The id of this Image.
        :type id: int
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Image.

        Title of the image  # noqa: E501

        :return: The title of this Image.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Image.

        Title of the image  # noqa: E501

        :param title: The title of this Image.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def tags(self) -> str:
        """Gets the tags of this Image.

        Tags of the image  # noqa: E501

        :return: The tags of this Image.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags: str):
        """Sets the tags of this Image.

        Tags of the image  # noqa: E501

        :param tags: The tags of this Image.
        :type tags: str
        """

        self._tags = tags

    @property
    def url(self) -> str:
        """Gets the url of this Image.

        URL of the image  # noqa: E501

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Image.

        URL of the image  # noqa: E501

        :param url: The url of this Image.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def upvotes(self) -> int:
        """Gets the upvotes of this Image.

        Number of upvotes for the image  # noqa: E501

        :return: The upvotes of this Image.
        :rtype: int
        """
        return self._upvotes

    @upvotes.setter
    def upvotes(self, upvotes: int):
        """Sets the upvotes of this Image.

        Number of upvotes for the image  # noqa: E501

        :param upvotes: The upvotes of this Image.
        :type upvotes: int
        """

        self._upvotes = upvotes

    @property
    def comments(self) -> List[Comment]:
        """Gets the comments of this Image.

        List of comments on the image  # noqa: E501

        :return: The comments of this Image.
        :rtype: List[Comment]
        """
        return self._comments

    @comments.setter
    def comments(self, comments: List[Comment]):
        """Sets the comments of this Image.

        List of comments on the image  # noqa: E501

        :param comments: The comments of this Image.
        :type comments: List[Comment]
        """

        self._comments = comments
