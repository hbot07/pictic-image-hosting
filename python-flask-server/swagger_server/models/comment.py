# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, username: str=None, text: str=None):  # noqa: E501
        """Comment - a model defined in Swagger

        :param id: The id of this Comment.  # noqa: E501
        :type id: int
        :param username: The username of this Comment.  # noqa: E501
        :type username: str
        :param text: The text of this Comment.  # noqa: E501
        :type text: str
        """
        self.swagger_types = {
            'id': int,
            'username': str,
            'text': str
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'text': 'text'
        }

        self._id = id
        self._username = username
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Comment.

        Unique identifier for the comment  # noqa: E501

        :return: The id of this Comment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Comment.

        Unique identifier for the comment  # noqa: E501

        :param id: The id of this Comment.
        :type id: int
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this Comment.

        Username of the user who posted the comment  # noqa: E501

        :return: The username of this Comment.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Comment.

        Username of the user who posted the comment  # noqa: E501

        :param username: The username of this Comment.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def text(self) -> str:
        """Gets the text of this Comment.

        Text of the comment  # noqa: E501

        :return: The text of this Comment.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this Comment.

        Text of the comment  # noqa: E501

        :param text: The text of this Comment.
        :type text: str
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text
