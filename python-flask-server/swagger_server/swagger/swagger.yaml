---
swagger: "2.0"
info:
  description: "The website is pictic, a web-based platform that offers image hosting\
    \ and sharing services. Users can upload their own images and view a feed of user-generated\
    \ image posts. The platform is designed to integrate Machine Learning (ML) algorithms\
    \ for automatic image labeling, improving the searchability and discoverability\
    \ of content on the platform. Users can interact with posts by upvoting, and commenting\
    \ on them. The website features a simple and easy-to-use interface with tools\
    \ such as tagging, liking, and commenting to help users organize and share their\
    \ content. The website also offers features such as profile customization, search\
    \ functionality, and a Chart-topping page displaying posts in order of upvotes."
  version: "0.0.1"
  title: "pictic API"
schemes:
- "https"
consumes:
- "multipart/form-data"
produces:
- "application/json"
paths:
  /images:
    post:
      tags:
      - "image"
      summary: "Upload a new image"
      operationId: "images_post"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "title"
        in: "formData"
        description: "Title of the image"
        required: true
        type: "string"
      - name: "description"
        in: "formData"
        description: "Description of the image"
        required: false
        type: "string"
      - name: "image"
        in: "formData"
        description: "Image file to upload"
        required: true
        type: "file"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "400":
          description: "Bad request"
          schema:
            $ref: "#/definitions/Error"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "500":
          description: "Internal server error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /images/{id}:
    get:
      tags:
      - "image"
      summary: "Get a specific image by ID"
      operationId: "images_id_get"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the image to retrieve"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
    delete:
      tags:
      - "image"
      summary: "Deletes an image"
      description: "delete an image"
      operationId: "delete_image"
      parameters:
      - name: "api_key"
        in: "header"
        description: ""
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "image id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
      - ApiKeyAuth: []
      responses:
        "400":
          description: "Invalid image id"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /images/{id}/upvote:
    post:
      tags:
      - "image"
      summary: "Upvote an image"
      operationId: "images_id_upvote_post"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the image to upvote"
        required: true
        type: "integer"
        format: "int64"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /images/{id}/comments:
    post:
      tags:
      - "comment"
      summary: "Add a comment to an image"
      operationId: "images_id_comments_post"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the image to comment on"
        required: true
        type: "integer"
        format: "int64"
      - in: "body"
        name: "body"
        description: "Comment object"
        required: false
        schema:
          $ref: "#/definitions/Comment"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
  /images/{id}/comments/{comment_id}:
    delete:
      tags:
      - "comment"
      summary: "Deletes a comment"
      description: "delete a comment"
      operationId: "delete_comment"
      parameters:
      - name: "api_key"
        in: "header"
        description: ""
        required: false
        type: "string"
      - name: "id"
        in: "path"
        description: "image id under which to delete"
        required: true
        type: "integer"
        format: "int64"
      - name: "comment_id"
        in: "path"
        description: "comment id to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
      - ApiKeyAuth: []
      responses:
        "400":
          description: "Invalid pet value"
      x-swagger-router-controller: "swagger_server.controllers.comment_controller"
  /images/{id}/share:
    post:
      tags:
      - "image"
      summary: "Get a shareable link to an image"
      operationId: "images_id_share_post"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the image to share"
        required: true
        type: "integer"
        format: "int64"
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/inline_response_200"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /images/findByTags:
    get:
      tags:
      - "image"
      summary: "Finds images by tags"
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "find_images_by_tags"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: false
        type: "string"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /images/findByTitle:
    get:
      tags:
      - "image"
      summary: "Finds images by title"
      description: ""
      operationId: "find_images_byitle"
      parameters:
      - name: "title"
        in: "query"
        description: "title to search by"
        required: false
        type: "string"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/Image"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "Image not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.image_controller"
  /users:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      operationId: "users_post"
      parameters:
      - in: "body"
        name: "body"
        description: "User object"
        required: false
        schema:
          $ref: "#/definitions/UserCreate"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/Error"
        "409":
          description: "Conflict"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /users/login:
    post:
      tags:
      - "user"
      summary: "Log in to an existing user account"
      operationId: "users_login_post"
      parameters:
      - in: "body"
        name: "body"
        description: "User login object"
        required: false
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/UserToken"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /users/logout:
    post:
      tags:
      - "user"
      summary: "Log out of the current user session"
      operationId: "users_logout_post"
      parameters: []
      security:
      - ApiKeyAuth: []
      responses:
        "200":
          description: "Successful response"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
  /users/{id}:
    delete:
      tags:
      - "user"
      summary: "Delete a user account"
      operationId: "users_id_delete"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the user to delete"
        required: true
        type: "integer"
        format: "int64"
      security:
      - ApiKeyAuth: []
      responses:
        "204":
          description: "No Content"
        "401":
          description: "Unauthorized"
          schema:
            $ref: "#/definitions/Error"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "swagger_server.controllers.user_controller"
securityDefinitions:
  ApiKeyAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-apikeyInfoFunc: "swagger_server.controllers.authorization_controller.check_ApiKeyAuth"
definitions:
  Image:
    type: "object"
    required:
    - "title"
    - "url"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique identifier for the image"
      title:
        type: "string"
        description: "Title of the image"
      tags:
        type: "string"
        description: "Tags of the image"
      url:
        type: "string"
        description: "URL of the image"
      upvotes:
        type: "integer"
        format: "int32"
        description: "Number of upvotes for the image"
      comments:
        type: "array"
        description: "List of comments on the image"
        items:
          $ref: "#/definitions/Comment"
    example:
      comments:
      - id: 1
        text: "text"
        username: "username"
      - id: 1
        text: "text"
        username: "username"
      upvotes: 6
      id: 0
      title: "title"
      url: "url"
      tags: "tags"
  Comment:
    type: "object"
    required:
    - "text"
    - "username"
    properties:
      id:
        type: "integer"
        format: "int64"
        description: "Unique identifier for the comment"
      username:
        type: "string"
        description: "Username of the user who posted the comment"
      text:
        type: "string"
        description: "Text of the comment"
    example:
      id: 1
      text: "text"
      username: "username"
  Error:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
  UserCreate:
    type: "object"
    required:
    - "email"
    - "password"
    - "username"
    properties:
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
  UserLogin:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      created_at:
        type: "string"
        format: "date-time"
    example:
      created_at: "2000-01-23T04:56:07.000+00:00"
      id: 0
      email: "email"
      username: "username"
  UserToken:
    type: "object"
    properties:
      access_token:
        type: "string"
    example:
      access_token: "access_token"
  inline_response_200:
    type: "object"
    properties:
      link:
        type: "string"
        description: "Shareable link to the image"
    example:
      link: "link"
