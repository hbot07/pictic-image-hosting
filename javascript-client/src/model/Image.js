/*
 * pictic API
 * The website is pictic, a web-based platform that offers image hosting and sharing services. Users can upload their own images and view a feed of user-generated image posts. The platform is designed to integrate Machine Learning (ML) algorithms for automatic image labeling, improving the searchability and discoverability of content on the platform. Users can interact with posts by upvoting, and commenting on them. The website features a simple and easy-to-use interface with tools such as tagging, liking, and commenting to help users organize and share their content. The website also offers features such as profile customization, search functionality, and a Chart-topping page displaying posts in order of upvotes.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Comment'));
  } else {
    // Browser globals (root is window)
    if (!root.PicticApi) {
      root.PicticApi = {};
    }
    root.PicticApi.Image = factory(root.PicticApi.ApiClient, root.PicticApi.Comment);
  }
}(this, function(ApiClient, Comment) {
  'use strict';

  /**
   * The Image model module.
   * @module model/Image
   * @version 0.0.1
   */

  /**
   * Constructs a new <code>Image</code>.
   * @alias module:model/Image
   * @class
   * @param title {String} Title of the image
   * @param url {String} URL of the image
   */
  var exports = function(title, url) {
    this.title = title;
    this.url = url;
  };

  /**
   * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Image} obj Optional instance to populate.
   * @return {module:model/Image} The populated <code>Image</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'Number');
      if (data.hasOwnProperty('title'))
        obj.title = ApiClient.convertToType(data['title'], 'String');
      if (data.hasOwnProperty('tags'))
        obj.tags = ApiClient.convertToType(data['tags'], 'String');
      if (data.hasOwnProperty('url'))
        obj.url = ApiClient.convertToType(data['url'], 'String');
      if (data.hasOwnProperty('upvotes'))
        obj.upvotes = ApiClient.convertToType(data['upvotes'], 'Number');
      if (data.hasOwnProperty('comments'))
        obj.comments = ApiClient.convertToType(data['comments'], [Comment]);
    }
    return obj;
  }

  /**
   * Unique identifier for the image
   * @member {Number} id
   */
  exports.prototype.id = undefined;

  /**
   * Title of the image
   * @member {String} title
   */
  exports.prototype.title = undefined;

  /**
   * Tags of the image
   * @member {String} tags
   */
  exports.prototype.tags = undefined;

  /**
   * URL of the image
   * @member {String} url
   */
  exports.prototype.url = undefined;

  /**
   * Number of upvotes for the image
   * @member {Number} upvotes
   */
  exports.prototype.upvotes = undefined;

  /**
   * List of comments on the image
   * @member {Array.<module:model/Comment>} comments
   */
  exports.prototype.comments = undefined;


  return exports;

}));
