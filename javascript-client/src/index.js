/*
 * pictic API
 * The website is pictic, a web-based platform that offers image hosting and sharing services. Users can upload their own images and view a feed of user-generated image posts. The platform is designed to integrate Machine Learning (ML) algorithms for automatic image labeling, improving the searchability and discoverability of content on the platform. Users can interact with posts by upvoting, and commenting on them. The website features a simple and easy-to-use interface with tools such as tagging, liking, and commenting to help users organize and share their content. The website also offers features such as profile customization, search functionality, and a Chart-topping page displaying posts in order of upvotes.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.31
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Comment', 'model/Error', 'model/Image', 'model/InlineResponse200', 'model/User', 'model/UserCreate', 'model/UserLogin', 'model/UserToken', 'api/CommentApi', 'api/ImageApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/Comment'), require('./model/Error'), require('./model/Image'), require('./model/InlineResponse200'), require('./model/User'), require('./model/UserCreate'), require('./model/UserLogin'), require('./model/UserToken'), require('./api/CommentApi'), require('./api/ImageApi'), require('./api/UserApi'));
  }
}(function(ApiClient, Comment, Error, Image, InlineResponse200, User, UserCreate, UserLogin, UserToken, CommentApi, ImageApi, UserApi) {
  'use strict';

  /**
   * The_website_is_pictic_a_web_based_platform_that_offers_image_hosting_and_sharing_services__Users_can_upload_their_own_images_and_view_a_feed_of_user_generated_image_posts__The_platform_is_designed_to_integrate_Machine_Learning__ML_algorithms_for_automatic_image_labeling_improving_the_searchability_and_discoverability_of_content_on_the_platform__Users_can_interact_with_posts_by_upvoting_and_commenting_on_them__The_website_features_a_simple_and_easy_to_use_interface_with_tools_such_as_tagging_liking_and_commenting_to_help_users_organize_and_share_their_content__The_website_also_offers_features_such_as_profile_customization_search_functionality_and_a_Chart_topping_page_displaying_posts_in_order_of_upvotes_.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var PicticApi = require('index'); // See note below*.
   * var xxxSvc = new PicticApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new PicticApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new PicticApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new PicticApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 0.0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The Comment model constructor.
     * @property {module:model/Comment}
     */
    Comment: Comment,
    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error: Error,
    /**
     * The Image model constructor.
     * @property {module:model/Image}
     */
    Image: Image,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserCreate model constructor.
     * @property {module:model/UserCreate}
     */
    UserCreate: UserCreate,
    /**
     * The UserLogin model constructor.
     * @property {module:model/UserLogin}
     */
    UserLogin: UserLogin,
    /**
     * The UserToken model constructor.
     * @property {module:model/UserToken}
     */
    UserToken: UserToken,
    /**
     * The CommentApi service constructor.
     * @property {module:api/CommentApi}
     */
    CommentApi: CommentApi,
    /**
     * The ImageApi service constructor.
     * @property {module:api/ImageApi}
     */
    ImageApi: ImageApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
